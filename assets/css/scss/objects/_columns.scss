

// Predefine the variables below in order to alter and enable specific features.
$column-namespace:             $namespace !default;
$column-gutter:                0 !default; //24px !default;
$row-float:                    left !default;
$row-opposite-float:           right !default;
$total-columns:                12 !default;

///
/// Creates a row/container for grid items or columns.
///
/// @param $nest
///
@mixin row( $nest: false ) {

	@if $nest {
		padding-left: 0;
		padding-right: 0;
		width: auto;
		margin: 0 ( - $column-gutter / 2 );
		max-width: none;
	}
	@else {
		padding-left: $column-gutter;
		padding-right: $column-gutter;
		margin: 0 auto;
		width: 100%;
	}

	@include clearfix;
}


///
/// Creates a column.
///
/// @param $columns The number of columns
/// @param $last-column True if this is the last column
/// @param $center True if the column should be centered
/// @param $offset The number of columns to offset
/// @param $push The number of columns to push
/// @param $pull The number of columns to pull
/// @param $collapse True if the gutter padding should be removed for this column
/// @param $float True if this column should be floated in the default direction
///
/// http://csswizardry.com/2014/11/when-to-use-extend-when-to-use-a-mixin/
///
@mixin column( $columns: false, $last-column: false, $center: false, $offset: false, $push: false, $pull: false, $collapse: false, $float: true, $position: false ) {

	@if $position or $push or $pull {
		position: relative;
	}

	width: 100%;

	// Collapse the column padding, set the standard column padding or (if null) do nothing
	@if $collapse {
		padding-left: 0;
		padding-right: 0;
	}
	@else if $collapse == false {
		padding-left: $column-gutter / 2;
		padding-right: $column-gutter / 2;
	}

	// If a column number is given, calculate width
	@if $columns {
		width: percentage( ( $columns / $total-columns ) );
		@if $last-column {
			float: $row-opposite-float;
		}
	}

	@if $float {
		float: $row-float;
	}

	// Push the column right, or pull it left, by a specific number of columns
	@if $push {
		#{$row-float}: percentage( ( $push / $total-columns ) );
		#{$row-opposite-float}: auto;
	}
	@if $pull {
		#{$row-opposite-float}: percentage( ( $pull / $total-columns ) );
		#{$row-float}: auto;
	}

	// Center the column
	@if $center {
		margin-#{$row-float}: auto;
		margin-#{$row-opposite-float}: auto;
		float: none;
	}

	// Offset the column by a specific number of columns
	@if $offset {
		margin-#{$row-float}: percentage( ( $offset / $total-columns ) ) !important;
	}
}


///
/// Creates presentational classes by applying the row and column mixins for a specific size.
///
/// @param $size
///
@mixin columns( $size ) {

	@for $i from 1 through $total-columns {
		.#{$size}-#{$i} {
			@include column( $columns: $i, $collapse: null, $float: false );
		}
	}

	@for $i from 0 through $total-columns - 1 {

		.#{$size}-push-#{$i} {
			@include column( $push: $i, $collapse: null, $float: false );
		}
		.#{$size}-pull-#{$i} {
			@include column( $pull: $i, $collapse: null, $float: false );
		}
	}

	@for $i from 0 through $total-columns - 1 {
		.#{$size}-offset-#{$i} {
			@include column( $offset: $i, $collapse: null, $float: false );
		}
	}

	.columns.#{$size}-centered {
		@include column( $center: true, $collapse: null, $float: false );
	}

	.columns.#{$size}-centered:last-child {
		float: none;
	}
}